#!/usr/bin/env bash


# /etc/passwd read permission check function
passwd_permission_check () {
    file=/etc/passwd

    # check if file exists
    if test -f $file
    then
        :
    else
        echo 1
        return
    fi

    # check for permissions
    if [[ -r "$file" ]]
    then
        echo 0
    else
        echo 2
    fi
}

print_home_dir () {
    echo ~
}

list_usernames () {
    permission_check=$(passwd_permission_check)
    if ((permission_check == 1)); then
        echo "Feature unavailable: /etc/passwd doesn't exist"
    elif ((permission_check == 2)); then
        echo "Feature unavailable: no read permission on /etc/passwd"
    fi

    cat /etc/passwd | cut -f 1 -d ':'
}

count_users () {
    list_usernames | wc -l
}

specific_user_home () {
    permission_check=$(passwd_permission_check)
    if ((permission_check == 1)); then
        echo "Feature unavailable: /etc/passwd doesn't exist"
    elif ((permission_check == 2)); then
        echo "Feature unavailable: no read permission on /etc/passwd"
    fi

    read -p "Enter username: " user
    if grep -w -q $user /etc/passwd
    then
        cat /etc/passwd | grep -w $user | cut -f 6 -d ':'
    else
        echo "No such user"
    fi
}

list_by_uid () {
    permission_check=$(passwd_permission_check)
    if ((permission_check == 1)); then
        echo "Feature unavailable: /etc/passwd doesn't exist"
    elif ((permission_check == 2)); then
        echo "Feature unavailable: no read permission on /etc/passwd"
    fi

    uid_low=1000
    uid_high=1010

    while read -r line
    do
        uid=$(echo $line | cut -f 3 -d ':')
        if ((uid >= uid_low && uid <= uid_high)); then
            echo $(echo $line | cut -f 1 -d ':')
        fi

    done < /etc/passwd
}

list_if_stdshell () {
    permission_check=$(passwd_permission_check)
    if ((permission_check == 1)); then
        echo "Feature unavailable: /etc/passwd doesn't exist"
    elif ((permission_check == 2)); then
        echo "Feature unavailable: no read permission on /etc/passwd"
    fi

    standard_shells=("/bin/bash" "/bin/sh")

    while read -r line
    do
        shell=$(echo $line | cut -f 7 -d ':')
        if [[ ${standard_shells[@]} =~ $shell ]]
        then
            echo $(echo $line | cut -f 1 -d ':')
        fi
    done < /etc/passwd
}

replace_to_backslash () {
    permission_check=$(passwd_permission_check)
    if ((permission_check == 1)); then
        echo "Feature unavailable: /etc/passwd doesn't exist"
    elif ((permission_check == 2)); then
        echo "Feature unavailable: no read permission on /etc/passwd"
    fi

    out_file="out-etc-passwd"
    cat /etc/passwd | tr '/' '\\' > $out_file
    echo "Written to $out_file"
}

print_private_ip () {
    echo "IPv4:"
    ip a s | grep -w inet | sed 's/^[ \t]*//' | cut -f 2 -d ' '
    echo
    echo "IPv6:"
    ip a s | grep -w inet6 | sed 's/^[ \t]*//' | cut -f 2 -d ' '
}

print_public_ip () {
    curl https://ipinfo.io/ip
    echo
}

switch_to_john () {
    user="john"
    echo "Switching to user $user"
    su john
}

main_menu () {
    while :
    do
        echo "Choose action: "
        echo "0. Exit"
        echo "1. Print the home directory"
        echo "2. List all usernames from the passwd file"
        echo "3. Count the number of users"
        echo "4. Find the home directory of a specific user"
        echo "5. List users with UID range (1000 - 1010)"
        echo "6. Find users with /bin/bash or /bin/sh shells"
        echo "7. Replace '/' with '\' in the entire /etc/passwd and redirect the content to out-etc-passwd"
        echo "8. Print the private IPs"
        echo "9. Print the public IP"
        echo "10. Switch to john user"
        echo "11. Print the home directory"

        echo

        read -p "" choice
        clear

        case $choice in
            0)
                return
                ;;
            1)
                print_home_dir
                ;;
            2)
                list_usernames
                ;;
            3)
                count_users
                ;;
            4)
                specific_user_home
                ;;
            5)
                list_by_uid
                ;;
            6)
                list_if_stdshell
                ;;
            7)
                replace_to_backslash
                ;;
            8)
                print_private_ip
                ;;
            9)
                print_public_ip
                ;;
            10)
                switch_to_john
                ;;
            11)
                print_home_dir
                ;;
            *)
                echo "Invalid input, try again"
        esac

        echo
        read -p "Press Enter to continue"
        clear
    done

}

clear

# Check if filename is passwd
# Not really sure if exactly this was required
if [ $(basename $0) != "passwd" ]
then
    echo "Warning: file name is not passwd"
fi

main_menu
